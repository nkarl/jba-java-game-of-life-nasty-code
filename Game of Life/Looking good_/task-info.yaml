type: edu
custom_name: Looking good!
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import life.GameOfLife;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class GameOfLifeTest extends SwingTest {

        public GameOfLifeTest() {
            super(new GameOfLife());
        }

        @SwingComponent(name = "GenerationLabel")
        JLabelFixture generationLabel;

        @SwingComponent(name = "AliveLabel")
        JLabelFixture aliveLabel;

        @DynamicTest(order = 1)
        CheckResult testWindow() {
            requireVisible(window);
            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testGenerationLabel() {
            requireEnabled(generationLabel);
            requireVisible(generationLabel);
            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testAliveLabel() {
            requireEnabled(aliveLabel);
            requireVisible(aliveLabel);
            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult testForInteger() {

            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(generationLabel.text());

            if (!matcher.find()) {
                return wrong("The 'GenerationLabel' doesn't contain an integer number!");
            }

            matcher = pattern.matcher(aliveLabel.text());

            if (!matcher.find()) {
                return wrong("The 'AliveLabel' doesn't contain an integer number!");
            }

            return correct();
        }
    }
  learner_created: false
- name: src/life/engine/Life.java
  visible: true
  text: |
    package life.engine;

    import java.util.Random;

    /*
        Reference Gist from HeyMilkshake, moderator @JetBrains Academy's Discord
        https://gist.github.com/msmilkshake/f887e0fed34521117c44be29a4471fdc
     */
    public class Life extends Model implements View {

        public Life(int size) {
            super(size);
            Random random = new Random();
            for (int i = 0; i < size; ++i) {
                for (int j = 0; j < size; ++j)
                    this.map[i][j] = (random.nextBoolean()) ? 1 : 0;
            }
        }

        @Override
        public void propagate(int gens) {
            for (int i = 0; i < gens; ++i) {
                generate();
                view();
            }
        }

        @Override
        void generate() {
            for (int i = 0; i < this.size - 1; ++i) {
                for (int j = 0; j < this.size - 1; ++j)
                    this.map[i][j] = live(i, j) ? 1 : 0;
            }
        }

        boolean live(int row, int col) {
            int count = countNeighbors(row, col);
            return count == 2 || count == 3;
        }

        int countNeighbors(int row, int col) {
            int count = 0;
            int r, c;

            for (int i = -1; i < 2; ++i) {
                r = wrapBorder(i + row);
                for (int j = -1; j < 2; ++j) {
                    c = wrapBorder(j + col);
                    if (r == row && c == col) continue;
                    count += (this.map[r][c] == 1) ? 1 : 0;
                }
            }
            return count;
        }

        int wrapBorder(int coordinate) {
            return (coordinate) % this.size;
        }


        /**
         * Interface: view the map of life.
         */
        @Override
        public void view() {
            for (var row : this.map) {
                for (int cell : row) {
                    if (cell == 1) System.out.print('O');
                    else System.out.print(' ');
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/life/engine/Life.javaBAK
  visible: true
  learner_created: true
- name: src/life/engine/Model.java
  visible: true
  text: |
    package life.engine;

    public abstract class Model {
        int size;
        protected int[][] map;

        Model(int size) {
            this.size = size;
            this.map = new int[size][size];
        }

        public abstract void propagate(int gens);

        abstract void generate();
    }
  learner_created: true
- name: src/life/engine/View.java
  visible: true
  text: |
    package life.engine;

    public interface View {
        public void view();
    }
  learner_created: true
- name: bin/main/myLifeTest.py
  visible: true
  learner_created: true
- name: bin/main/life/engine/Life.javaBAK
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement#comment
status: Unchecked
record: 4
