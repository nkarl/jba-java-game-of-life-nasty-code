type: edu
custom_name: stage5
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import life.engine.Life;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int size = scanner.nextInt();
            long seed = scanner.nextLong();
            int gens = scanner.nextInt();
            Life world = new Life(size, seed);

            world.propagate(gens);
        }
    }
  learner_created: false
- name: src/life/engine/Life.java
  visible: true
  text: |
    package life.engine;

    import java.util.Random;

    /*
        Reference Gist from HeyMilkshake, moderator @JetBrains Academy's Discord
        https://gist.github.com/msmilkshake/f887e0fed34521117c44be29a4471fdc
     */
    public class Life extends Model implements View {

        public Life(int size, long seed) {
            super(size);
            Random random = new Random(seed);
            for (int i = 0; i < size; ++i) {
                for (int j = 0; j < size; ++j)
                    this.map[i][j] = (random.nextBoolean()) ? 1 : 0;
            }
        }

        public void propagate(int gens) {
            for (int i = 0; i < gens; ++i) {
                generate();
            }
            view();
        }

        void generate() {
            Model future = new Model(this.size) {};
            for (int i = 0; i < this.size - 1; ++i) {
                for (int j = 0; j < this.size - 1; ++j)
                    future.map[i][j] = live(i, j) ? 1 : 0;
            }
            this.map = future.map;
        }

        boolean live(int row, int col) {
            int count = countNeighbors(row, col);
            if (count == 2 || count == 3) {
                return this.map[row][col] == 0;
            }
            return false;
        }

        int countNeighbors(int row, int col) {
            int count = 0;
            int r, c;

            for (int i = -1; i < 2; ++i) {
                r = loopCoordinate(i + row);
                for (int j = -1; j < 2; ++j) {
                    c = loopCoordinate(j + col);
                    if (r == row && c == col) continue;
                    count += (this.map[r][c] == 1) ? 1 : 0;
                }
            }
            return count;
        }

        int loopCoordinate(int coordinate) {
            return (coordinate + this.size) % this.size;
        }


        /**
         * Interface: view the map of life.
         */
        @Override
        public void view() {
            for (var row : this.map) {
                for (int cell : row) {
                    if (cell == 1) System.out.print('O');
                    else System.out.print(' ');
                }
                System.out.println();
            }
        }
    }
  learner_created: false
- name: src/life/engine/Model.java
  visible: true
  text: |
    package life.engine;

    public abstract class Model {
        int size;
        protected int[][] map;

        Model(int size) {
            this.size = size;
            this.map = new int[size][size];
        }

        public void propagate(int gens) {}
        void generate() {}
        void live() {}
        void locate() {}
        void atCenter() {}
        void atBorder() {}
    }
  learner_created: false
- name: src/life/engine/View.java
  visible: true
  text: |
    package life.engine;

    public interface View {
        public void view();
    }
  learner_created: false
- name: bin/main/myLifeTest.py
  visible: true
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import life.GameOfLife;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JToggleButtonFixture;
    import org.hyperskill.hstest.common.Utils;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class GameOfLifeTest extends SwingTest {

        public GameOfLifeTest() {
            super(new GameOfLife());
        }

        @SwingComponent(name = "GenerationLabel")
        JLabelFixture generationLabel;

        @SwingComponent(name = "AliveLabel")
        JLabelFixture aliveLabel;

        @SwingComponent(name = "PlayToggleButton")
        JToggleButtonFixture playButton;

        @SwingComponent(name = "ResetButton")
        JButtonFixture resetButton;

        @DynamicTest(order = 1)
        CheckResult testWindow() {
            requireVisible(window);
            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testGenerationLabel() {
            requireEnabled(generationLabel);
            requireVisible(generationLabel);
            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testAliveLabel() {
            requireEnabled(aliveLabel);
            requireVisible(aliveLabel);
            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult testForIntegerInLabels() {

            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(generationLabel.text());

            if (!matcher.find()) {
                return wrong("The 'GenerationLabel' doesn't contain an integer number!");
            }

            matcher = pattern.matcher(aliveLabel.text());

            if (!matcher.find()) {
                return wrong("The 'AliveLabel' doesn't contain an integer number!");
            }

            return correct();
        }

        @DynamicTest(order = 5)
        CheckResult testPlayButton() {
            requireEnabled(playButton);
            requireVisible(playButton);
            playButton.click();
            playButton.click();
            return correct();
        }

        @DynamicTest(order = 6)
        CheckResult testResetButton() {
            requireEnabled(resetButton);
            requireVisible(resetButton);
            resetButton.click();
            return correct();
        }

        @DynamicTest(order = 7)
        CheckResult testButtonsActions() {

            playButton.uncheck();
            resetButton.click();

            int firstGenerationNumber = getNumberFromLabel(generationLabel);
            Utils.sleep(200);
            int secondGenerationNumber = getNumberFromLabel(generationLabel);

            if (firstGenerationNumber != secondGenerationNumber) {
                return wrong("When PlayToggleButton is not toggled the program shouldn't generate new generations! The number in GenerationLabel shouldn't change!");
            }

            resetButton.click();
            firstGenerationNumber = getNumberFromLabel(generationLabel);
            playButton.check();
            Utils.sleep(200);
            secondGenerationNumber = getNumberFromLabel(generationLabel);

            if (firstGenerationNumber == secondGenerationNumber) {
                return wrong("When PlayToggleButton is toggled the program should generate new generations! The number in GenerationLabel should change!\n" +
                        "Also make sure your program doesn't sleep more than 150 ms after each generation!");
            }

            return correct();
        }

        private static int getNumberFromLabel(JLabelFixture labelFixture) {
            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(labelFixture.text());

            System.out.println(labelFixture.text());

            if (!matcher.find()) {
                throw new WrongAnswer("Can't find a number in the '" + labelFixture.text() + "'!");
            }

            return Integer.parseInt(matcher.group());
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/54/stages/299/implement#comment
status: Solved
record: 4
